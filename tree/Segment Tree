struct segmentTreeNode{
    int sum;
    int l,r;
    segmentTreeNode* left,*right;
    segmentTreeNode(int _l,int _r):sum(0),l(_l),r(_r),left(NULL),right(NULL){};
};
class segmentTree{
public:
    segmentTreeNode *root;
    segmentTree(vector<int>& nums){
        root=buildNode(nums,0,nums.size()-1);
    }
    void updateNode(int index,int num){
        updateNode(root,index,num);
    }
    int getSum(int l_index,int r_index){
        return sumRange(root, l_index, r_index);
    }
private:
    void updateNode(segmentTreeNode * root,int index,int num){
        if(root->l==root->r&&root->l==index){
            root->sum=num;
        }else{
            int mid=(root->l+root->r)/2;
            if(index<=mid){
                int temp=root->left->sum;
                updateNode(root->left,index,num);
                root->sum=root->sum-temp+root->left->sum;
            }else{
                int temp=root->right->sum;
                updateNode(root->right,index,num);
                root->sum=root->sum-temp+root->right->sum;
            }
                
        }
    }
    int sumRange(segmentTreeNode* root, int l_index,int r_index){
        if(root->l==l_index&&root->r==r_index)
            return root->sum;
        int mid=(root->l+root->r)/2;
        if(r_index<=mid)
            return sumRange(root->left, l_index, r_index);
        if(l_index>mid)
            return sumRange(root->right, l_index, r_index);
        return sumRange(root->left, l_index, mid)+sumRange(root->right, mid+1, r_index);
    }
    segmentTreeNode* buildNode(vector<int>&nums,int l_index,int r_index){
        if(l_index>r_index)
            return NULL;
        segmentTreeNode* ret=new segmentTreeNode(l_index,r_index);
        if(l_index==r_index)
            ret->sum=nums[l_index];
        else{
            int mid=(l_index+r_index)/2;
            ret->left=buildNode(nums, l_index, mid);
            ret->right=buildNode(nums, mid+1,r_index);
            ret->sum=ret->left->sum+ret->right->sum;
        }
        return ret;
    }
};
